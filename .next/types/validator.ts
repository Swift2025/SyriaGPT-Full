// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\[lang]\about\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\about\\page.js")
  handler satisfies AppPageConfig<"/[lang]/about">
}

// Validate ..\..\src\app\[lang]\forgot-password\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\forgot-password\\page.js")
  handler satisfies AppPageConfig<"/[lang]/forgot-password">
}

// Validate ..\..\src\app\[lang]\help\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\help\\page.js")
  handler satisfies AppPageConfig<"/[lang]/help">
}

// Validate ..\..\src\app\[lang]\intelligent-qa\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\intelligent-qa\\page.js")
  handler satisfies AppPageConfig<"/[lang]/intelligent-qa">
}

// Validate ..\..\src\app\[lang]\login\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\login\\page.js")
  handler satisfies AppPageConfig<"/[lang]/login">
}

// Validate ..\..\src\app\[lang]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\page.js")
  handler satisfies AppPageConfig<"/[lang]">
}

// Validate ..\..\src\app\[lang]\privacy\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\privacy\\page.js")
  handler satisfies AppPageConfig<"/[lang]/privacy">
}

// Validate ..\..\src\app\[lang]\profile\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\profile\\page.js")
  handler satisfies AppPageConfig<"/[lang]/profile">
}

// Validate ..\..\src\app\[lang]\register\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\register\\page.js")
  handler satisfies AppPageConfig<"/[lang]/register">
}

// Validate ..\..\src\app\[lang]\reset-password\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\reset-password\\page.js")
  handler satisfies AppPageConfig<"/[lang]/reset-password">
}

// Validate ..\..\src\app\[lang]\settings\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\settings\\page.js")
  handler satisfies AppPageConfig<"/[lang]/settings">
}

// Validate ..\..\src\app\[lang]\terms\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\terms\\page.js")
  handler satisfies AppPageConfig<"/[lang]/terms">
}

// Validate ..\..\src\app\[lang]\upgrade\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\upgrade\\page.js")
  handler satisfies AppPageConfig<"/[lang]/upgrade">
}

// Validate ..\..\src\app\[lang]\verify-email\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\verify-email\\page.js")
  handler satisfies AppPageConfig<"/[lang]/verify-email">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\api\chat\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\chat\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chat">
}

// Validate ..\..\src\app\api\files\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\files\\route.js")
  handler satisfies RouteHandlerConfig<"/api/files">
}

// Validate ..\..\src\app\api\intelligent-qa\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\intelligent-qa\\route.js")
  handler satisfies RouteHandlerConfig<"/api/intelligent-qa">
}





// Validate ..\..\src\app\[lang]\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\layout.js")
  handler satisfies LayoutConfig<"/[lang]">
}

// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
